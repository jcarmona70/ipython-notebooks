{
 "metadata": {
  "name": "NewtonFractal"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": "Fractales de Newton."
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": "Ceros de polinomios, aproximaciones de Newton y bonitos dibujos."
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Desde hace mucho tiempo los matem\u00e1ticos se han preocupado de hallar soluciones de ecuaciones. \n\nDe estas las m\u00e1s sencillas son las polin\u00f3micas.\n\nSi la soluci\u00f3n $x$ a un problema cumple $a\\cdot x+b=0$, con $a,b$ n\u00fameros reales la cosa es muy f\u00e1cil: $x=a/b$.\n\nTodo el mundo sabe que si un problema se reduce a resolver una ecuaci\u00f3n del tipo $a\\cdot x^2+b\\cdot x + c=0$, con $a,b$ y $c$ n\u00fameros reales, basta aplicar una sencilla f\u00f3rmula para obtener los dos posibles valores de $x$.\n\nPara las de grado 3 y 4 existen f\u00f3rmulas para obtener las ra\u00edces pero la cosa ya se pone un poco m\u00e1s complicada (de hecho, salvo raras excepciones, no se  estudian  esas f\u00f3rmulas en la educaci\u00f3n secundaria).\n\nLa cosa se pone peor para las de grado 5, para algunos polinomios existe una f\u00f3rmula que nos d\u00e1 las ra\u00edces en funci\u00f3n de los coeficientes y para otros se sabe que no existe tal f\u00f3rmula. Demostrar eso es una cuesti\u00f3n algebraica avanzada, la wikipedia nos d\u00e1 buena informaci\u00f3n sobre esto: http://en.wikipedia.org/wiki/Quintic_function\n\nAfortunadamente existen m\u00e9todos num\u00e9ricos para aproximar las soluciones de una ecuaci\u00f3n."
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": "M\u00e9todo de Newton"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Si tenemos un polinomio $f(x)$ y un $x_0$, podemos sustituir el polinomio $f(x)$ por la recta tangente a la curva $y=f(x)$ en el punto $(x_0,f(x_0))$. Esa recta corta al eje $x$ en un punto cuya coordenada $x$ es $x_1=x_0-{f(x_0)\\over f'(x_0)}$.\n\nSi repetimos el proceso obtenemos una sucesi\u00f3n: $x_{k+1}=x_k-{f(x_k)\\over f'(x_k)}$. Salvo para unas pocas elecciones de $x_0$\nla sucesi\u00f3n converge a un cero de $f$.\n\nSupongamos definidas las funciones: f y derf de la siguiente forma:"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def f(x):\n    return x**4-1\ndef derf(x):\n    return 4*(x**3)",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Se trata de definir una funci\u00f3n newton que dados: una funci\u00f3n, su derivada, un valor inicial, un epsilon y un n\u00famero m\u00e1ximo de iteracciones, devuelva:\n\nuna aproximaci\u00f3n de un cero de la funci\u00f3n f obtenida aplicando el m\u00e9todo de Newton y el n\u00famero de iteracciones que hemos necesitado. (consideramos que un $x_k$ es suficientemente bueno si abs($f(x_k)$)<epsilon\n\nsi tras realizar el n\u00famero maximo de iteracciones la aproximaci\u00f3n no es aceptable devolvemos el valor alcanzado y el n\u00famero de iteracciones.\n\nUn ejemplo de uso de la funci\u00f3n:"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": " print newton(f,derf,1234.,2**(-32),100)\n print newton(f,derf,-1234.,2**(-32),100)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "(1.0000000000000069, 29)\n(-1.0000000000000069, 29)\n"
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Todo lo anterior sigue siendo cierto si nuestra variable se mueve en los n\u00fameros complejos"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "print newton(f,derf,complex(0,7),2**(-32),100)\nprint newton(f,derf,complex(0,-7),2**(-32),100)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "(1.000000000000011j, 11)\n(-1.000000000000011j, 11)\n"
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "As\u00ed que hemos obtenido las cuatro soluciones complejas de la funci\u00f3n $f$.(Lo cual no tiene mucho m\u00e9rito pues sabemos hacerlas a mano). "
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "r0=newton(f,derf,complex(0,2),2**(-32),100000)[0]\nr1=newton(f,derf,complex(0,-2),2**(-32),100000)[0]\nr2=newton(f,derf,complex(2,0),2**(-32),100000)[0]\nr3=newton(f,derf,complex(-2,0),2**(-32),100000)[0]",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Hay sitios desde los que la convergencia no se produce:"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "newton(f,derf,complex(2,2),2**(-32),100000)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": "((6110783.794324929+6110783.794324929j), 100000)"
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Surge una interesante pregunta, \u00bfComo cambia la ra\u00edz que encontarmos cuando cambiamos un poco la aproximaci\u00f3n inicial?\nEl objetivo de la pr\u00e1ctica es generar un dibujo que nos muestre esa informaci\u00f3n, para ello recorreremos los puntos de \nun rect\u00e1ngulo de n\u00fameros complejos y pintaremos cada uno de ellos de un color diferente determinado por la ra\u00edz a la que converga el m\u00e9todo de Newton (o lo dejaremos blanco si no converge).\n\nUn ejemplo:"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "import Image\nraices=[r0,r1,r2,r3]\nfractal=newton_fractal(f,derf,raices,[(255,0,0),(0,255,0),(0,0,255),(255,0,255)],2,2,0.005)\nfractal.show()",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Como puedes ver, para ello necesitamos usar el m\u00f3dulo de Python Image"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Todo se me ocurri\u00f3 a partir de aqu\u00ed: http://www.investigacionyciencia.es/blogs/fisica-y-quimica/33/posts"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "import Image",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def newton(f,derf,z0,epsilon,max_steps):\n    steps=0\n    z=z0\n    if abs(derf(z))!=0:\n        inc=-f(z)/derf(z)\n            #print z\n    else:\n        steps=max_steps\n    while steps<max_steps and  abs(f(z))>epsilon:\n        z=z+inc\n        steps=steps+1\n        if abs(derf(z))!=0:\n            inc=-f(z)/derf(z)\n            #print z\n        else:\n            steps=max_steps\n    return z,steps",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def f(z):\n    return z**4-1\ndef derf(z):\n    return 4*(z**3)\n",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "print newton(f,derf,complex(0,2),2**(-64),100000)\nprint newton(f,derf,complex(0,-2),2**(-64),100000)\nprint newton(f,derf,complex(2,0),2**(-64),100000)\nprint newton(f,derf,complex(-2,0),2**(-64),100000)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "(1j, 7)\n(-1j, 7)\n((1+0j), 7)\n((-1+0j), 7)\n"
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "r0=newton(f,derf,complex(0,2),2**(-32),100000)[0]\nr1=newton(f,derf,complex(0,-2),2**(-32),100000)[0]\nr2=newton(f,derf,complex(2,0),2**(-32),100000)[0]\nr3=newton(f,derf,complex(-2,0),2**(-32),100000)[0]",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def mas_cercana(z,l):\n    result=0\n    dist=abs(z-l[0])\n    for i in range(1,len(l)):\n        dist_act=abs(z-l[i])\n        if dist_act<dist:\n            result=i\n            dist=dist_act\n    return result\n\ndef newton_fractal(f,derf,roots,colors,max_img,max_real,prec):\n    xpoints=2*int(round(max_real/prec))\n    ypoints=2*int(round(max_real/prec))\n    im=Image.new(\"RGB\",(xpoints+1,ypoints+1),\"white\")\n    cont=0\n    for x in xrange(xpoints+1):\n        for y in xrange(ypoints+1):\n            z0=complex((x-xpoints/2)*prec,(ypoints/2-y)*prec)\n            aprox,steps=newton(f,derf,z0,2**(-32),100)\n            if steps<100:\n                im.putpixel((x,y),colors[mas_cercana(aprox,roots)])\n            #cont=cont+1\n            #if cont%10000==0:\n            #   print steps,x,y\n            #   print aprox\n    return im",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "raices=[r0,r1,r2,r3]\nfractal=newton_fractal(f,derf,raices,[(255,0,0),(0,255,0),(0,0,255),(255,0,255)],2,2,0.005)",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "fractal.show()",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "",
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
